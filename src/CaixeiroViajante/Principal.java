/*
 * Principal.java
 *
 * Created on Updated 29 Outubro de 2016, 10:01
 */

package CaixeiroViajante;

import java.util.*;
import java.awt.*; 

/**
 *
 * @author updated Andre Morales
 */
public class Principal extends javax.swing.JFrame {

    /**
     * Creates new form Principal
     */
    public Principal() {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        buttonExecutar = new javax.swing.JButton();
        buttonSair = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea2 = new javax.swing.JTextArea();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Problema do Caixeiro Viajante - Updated Andre Morales 2016");

        jPanel1.setBackground(java.awt.SystemColor.activeCaption);
        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Parâmetros"));

        jLabel2.setText("Informe a matriz de adjacência");

        buttonExecutar.setText("Executar");
        buttonExecutar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonExecutarActionPerformed(evt);
            }
        });

        buttonSair.setText("Sair");
        buttonSair.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonSairActionPerformed(evt);
            }
        });

        jTextArea2.setBackground(java.awt.SystemColor.control);
        jTextArea2.setColumns(20);
        jTextArea2.setFont(new java.awt.Font("Monospaced", 1, 20)); // NOI18N
        jTextArea2.setRows(10);
        jTextArea2.setText("0 3 5 48 27 12 8\n3 0 3 50 48 8 8\n5 3 0 72 60 36 48\n48 50 72 0 10 15 5\n27 48 60 10 0 6 6\n12 8 36 15 6 0 18\n8 8 48 5 18 6 0");
        jScrollPane2.setViewportView(jTextArea2);

        jLabel3.setText("(valores separados por espaço)");

        jLabel4.setText("(substituir os  ---   por 0 )  ");

        jLabel5.setText("  ");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4)
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(buttonExecutar, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(buttonSair, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())
                    .addComponent(jScrollPane2)))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel5))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 276, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(buttonSair)
                    .addComponent(buttonExecutar)))
        );

        jPanel2.setBackground(java.awt.SystemColor.activeCaption);
        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Resultados obtidos através do método Depth-First Search modificado"));

        jTextArea1.setBackground(java.awt.SystemColor.control);
        jTextArea1.setColumns(40);
        jTextArea1.setFont(new java.awt.Font("Monospaced", 1, 13)); // NOI18N
        jTextArea1.setRows(10);
        jScrollPane1.setViewportView(jTextArea1);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 526, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 251, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jPanel2.getAccessibleContext().setAccessibleName("Resultados obtidos através do método Depth-First Search modificado  v 2.0 com maximo de rotas possiveis");
        jPanel2.getAccessibleContext().setAccessibleDescription("");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void buttonSairActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonSairActionPerformed
        // TODO adicione seu cï¿½digo de manipulaï¿½ï¿½o aqui:
        System.exit(0);
    }//GEN-LAST:event_buttonSairActionPerformed

    private void buttonExecutarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonExecutarActionPerformed
        // TODO adicione seu cï¿½digo de manipulaï¿½ï¿½o aqui:
        int i,j;

        Date horaInicio = new Date();
        long horaInicioLong = horaInicio.getTime();

        jTextArea1.setText("");

        String linhas[] = jTextArea2.getText().split("\n");
        String [] colunas = null;
        numVertices = linhas[0].split(" ").length;

        // Cria vetores
        matrizAdjacencia = new int[linhas.length][numVertices];
        explorado = new int[numVertices];
        ciclo = new int[numVertices];
        melhorCiclo = new int[numVertices];

        // Monta a matriz de adjacï¿½ncia
        for (i=0; i<linhas.length; i++) {
            colunas = linhas[i].split(" ");
            for (j=0; j<colunas.length; j++) {

                if (i==j) {
                    // Desconsidera para fins de cï¿½lculo
                    matrizAdjacencia[i][j] = 0;
                } else {
                    try {
                        matrizAdjacencia[i][j] = Integer.valueOf(colunas[j]);
                    } catch (Exception e) {
                        jTextArea1.append("ERRO: Informe somente valores inteiros\n");
                        jTextArea2.setForeground(Color.red);
                        jTextArea1.append(e.toString()+"\n");
                        i=linhas.length;
                        break;
                    }
                }
            }
        }

        for(i=0;i<numVertices;i++)
        explorado[i]=0;
        jTextArea1.append("Todos os caminhos possiveis \n");

        nivel=0;    /* inicializa nivel */
        min=1000000;/* inicializa min */

        dfs(0,0);

        /* Resultado */
        jTextArea1.append("Acima todos os caminhos possiveis  \n");
        jTextArea1.append("-----------------------------------------\n");
        jTextArea1.append("Melhor ciclo obtido para " + Integer.toString(numVertices) + " vertices:    " + "\n");

        for(i=0;i<numVertices;i++) {
            if(i>0)
            jTextArea1.append("-");

            jTextArea1.append(Integer.toString(melhorCiclo[i]));
        }
        jTextArea1.append("\n");
        jTextArea1.append("----------------------------------------\n");

        /* Mostra o tempo de execuï¿½ï¿½o */
        Date horaFinal = new Date();
        long horaFinalLong = horaFinal.getTime();
        long tempoExecucaoMili = (horaFinalLong-horaInicioLong);
        Double tempoExecucaoSeg = tempoExecucaoMili/1000.0;

        jTextArea1.append("\n\nInicio: " + horaInicio);
        jTextArea1.append("\nFinal: " + horaFinal);
        jTextArea1.append("\nTempo de execução: " + Double.toString(tempoExecucaoSeg) + " segundos (" + tempoExecucaoMili + " milisegundos)\n");
        jTextArea2.setForeground(Color.green);
        jTextArea1.append("By:Andre Morales ");

    }//GEN-LAST:event_buttonExecutarActionPerformed

    private int medeciclo(int[] t) {
        int i;
        int l=0;

        for(i=0;i<numVertices-1;i++)
            l=l+matrizAdjacencia[t[i]][t[i+1]];
        l=l+matrizAdjacencia[t[numVertices-1]][t[0]];

        return l;
    }

/*  Esta funcao implementa o algoritmo DFS modificado para
    poder percorrer todos os caminhos possiveis. Apos o retorno, o vertice
    eh desmarcado como explorado, permitindo que ele seja explorado novamente */
    private void dfs(int v, int nivel) {
        int i,j,dist;
        explorado[v]=1;
        ciclo[nivel]=v;
        
        
        if(nivel==(numVertices-1)){
            /* completou um ciclo */
            dist=medeciclo(ciclo);
            for(i=0;i<numVertices;i++) {
            if(i>0)
                jTextArea1.append("-");
            
            jTextArea1.append(Integer.toString(ciclo[i]));
        }
            jTextArea1.append("\n");
            if(dist<min){
                min=dist;
                for(j=0;j<numVertices;j++)
                    melhorCiclo[j]=ciclo[j];
            }
        }
        
        for(i=0;i<numVertices;i++){
            if(explorado[i]!=1){
                dfs(i,nivel+1);
                explorado[i]=0;
            }
        
        }
    }
    
    

    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Principal().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonExecutar;
    private javax.swing.JButton buttonSair;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextArea jTextArea2;
    // End of variables declaration//GEN-END:variables

    int numVertices;            /* nï¿½mero de vï¿½rtices do grafo */
    int [][] matrizAdjacencia;  /* matriz de adjacï¿½ncia do grafo */
    int [] ciclo;               /* ciclo atual */
    int [] melhorCiclo;         /* melhor ciclo encontrado */
    int [] explorado;           /* vetor para armazenar se o vertice foi explorado pelo DFS*/
    int nivel;                  /* profundidade alcancada pelo DFS*/
    int min;                    /* usado para selecionar o menor ciclo */
}
